// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Order service

func NewOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Order service

type OrderService interface {
	// 创建出行订单
	CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...client.CallOption) (*RespCreateOrder, error)
	// 接受订单 / 抢单
	AcceptOrder(ctx context.Context, in *ReqAcceptOrder, opts ...client.CallOption) (*RespAcceptOrder, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...client.CallOption) (*RespCreateOrder, error) {
	req := c.c.NewRequest(c.name, "Order.CreateOrder", in)
	out := new(RespCreateOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AcceptOrder(ctx context.Context, in *ReqAcceptOrder, opts ...client.CallOption) (*RespAcceptOrder, error) {
	req := c.c.NewRequest(c.name, "Order.AcceptOrder", in)
	out := new(RespAcceptOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	// 创建出行订单
	CreateOrder(context.Context, *ReqCreateOrder, *RespCreateOrder) error
	// 接受订单 / 抢单
	AcceptOrder(context.Context, *ReqAcceptOrder, *RespAcceptOrder) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		CreateOrder(ctx context.Context, in *ReqCreateOrder, out *RespCreateOrder) error
		AcceptOrder(ctx context.Context, in *ReqAcceptOrder, out *RespAcceptOrder) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) CreateOrder(ctx context.Context, in *ReqCreateOrder, out *RespCreateOrder) error {
	return h.OrderHandler.CreateOrder(ctx, in, out)
}

func (h *orderHandler) AcceptOrder(ctx context.Context, in *ReqAcceptOrder, out *RespAcceptOrder) error {
	return h.OrderHandler.AcceptOrder(ctx, in, out)
}
