// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: driver.proto

package driver

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DriverSrv service

func NewDriverSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DriverSrv service

type DriverSrvService interface {
	ReportGeo(ctx context.Context, in *ReportRequest, opts ...client.CallOption) (*ReportResponse, error)
	QueryGeo(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
}

type driverSrvService struct {
	c    client.Client
	name string
}

func NewDriverSrvService(name string, c client.Client) DriverSrvService {
	return &driverSrvService{
		c:    c,
		name: name,
	}
}

func (c *driverSrvService) ReportGeo(ctx context.Context, in *ReportRequest, opts ...client.CallOption) (*ReportResponse, error) {
	req := c.c.NewRequest(c.name, "DriverSrv.ReportGeo", in)
	out := new(ReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverSrvService) QueryGeo(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "DriverSrv.QueryGeo", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DriverSrv service

type DriverSrvHandler interface {
	ReportGeo(context.Context, *ReportRequest, *ReportResponse) error
	QueryGeo(context.Context, *QueryRequest, *QueryResponse) error
}

func RegisterDriverSrvHandler(s server.Server, hdlr DriverSrvHandler, opts ...server.HandlerOption) error {
	type driverSrv interface {
		ReportGeo(ctx context.Context, in *ReportRequest, out *ReportResponse) error
		QueryGeo(ctx context.Context, in *QueryRequest, out *QueryResponse) error
	}
	type DriverSrv struct {
		driverSrv
	}
	h := &driverSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&DriverSrv{h}, opts...))
}

type driverSrvHandler struct {
	DriverSrvHandler
}

func (h *driverSrvHandler) ReportGeo(ctx context.Context, in *ReportRequest, out *ReportResponse) error {
	return h.DriverSrvHandler.ReportGeo(ctx, in, out)
}

func (h *driverSrvHandler) QueryGeo(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.DriverSrvHandler.QueryGeo(ctx, in, out)
}
